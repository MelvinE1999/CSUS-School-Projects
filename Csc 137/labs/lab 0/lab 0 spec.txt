Number Format Converter 

For this project you will be coding a simple number format converter in the Java programming language. The primary purpose of this project is to make sure that you are familiar with command line argument parsing in Java, to ensure that your JDK 11 environment is properly setup, and for you to get some immediate practice creating a JDK 11 single source executable. 

Your program will be contained entirely in a single java file called nfc.java. No other file name is acceptable. Note, you are allowed to submit multiple times and I know that Canvas will append numbers, don’t worry about that. Your program will be a JDK 11 single source executable and so your class names do not need to be the same as your file name. In fact, they should not be. 

For this assignment, it is a hard requirement that none of your text lines exceed 80 characters in length, including indents. This is both to encourage you to write lines of low width, which aids readability, and to facilitate grading in speedgrader. There are no exceptions to this, break any line that exceeds 80 characters in a neat and functional manner. Please note, your code must still work after breaking lines. I suggest that you set your editor to 80 character width to make sure that you aren’t exceeding this. 

Your program will take any number of positive or negative decimal numbers entered on the command prompt and convert those numbers to 16 bit 2’s complement binary and the associated hexadecimal, octal representations. Your program will run as a Java single source executable and must work using the following syntax. 

java nfc.java n1 ... nk
e.g.

java nfc.java 12 -10 500 1000 1234 -1234
If no numbers are passed to your program, your program must print out how to use the program on the console. If numbers are passed to your program, then you are to print the decimal, hexadecimal, octal, and binary representations of each number in formatted columns with one number per line. Neatness counts!

Your program should respond to any number of arguments passed in on the command line. You do not need to test it with more than a dozen or so, however, your code should allow for any length allowed by any particular JDK installation. In other words, don’t worry about shell or other OS limitations on command line size, but do not hardcode any maximum size. 